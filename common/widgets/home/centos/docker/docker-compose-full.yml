version: "3.7"

volumes:
  kong_data: {}

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

services:
  #######################################
  # Kong database migration
  #######################################
  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    restart: on-failure
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    networks:
      - backend

  #######################################
  # Kong database migration
  #######################################
  kong-migrations-up:
    image: kong:latest
    container_name: kong-migrations-up
    restart: on-failure
    command: kong migrations up && kong migrations finish
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    networks:
      - backend

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:latest
    container_name: kong
    restart: always
    # user: "${KONG_USER:-root}"
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_CASSANDRA_CONTACT_POINTS: kong-database
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    depends_on:
      - kong-database
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    networks:
      - frontend
      - backend

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.5
    container_name: kong-database
    restart: always
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    stdin_open: true
    tty: true
    volumes:
      - ./postgres/initdb:/docker-entrypoint-initdb.d
      - /etc/localtime:/etc/localtime:ro
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/postgres.conf:/etc/postgresql/postgresql.conf
      - ./logs/postgres:/var/log/postgresql
    ports:
      - "5432:5432"
    networks:
      - backend

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga
    container_name: konga-prepare
    restart: on-failure
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga_db"
    links:
      - kong-database
    depends_on:
      - kong-database
    networks:
      - backend

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    container_name: konga
    restart: always
    environment:
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: konga_db
      KONGA_HOOK_TIMEOUT: 120000
      NODE_ENV: production
    volumes:
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - kong-database
    ports:
      - "1337:1337"
    networks:
      - frontend
      - backend

  #######################################
  # Nginx: web server
  #######################################
  nginx:
    image: nginx:latest
    container_name: lemp_nginx
    restart: always
    volumes:
      - ./www:/var/www/html
      # - ./nginx:/etc/nginx
      - ./nginx/conf/nginx.conf:/etc/nginx/conf/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend
      - frontend

  #######################################
  # Redia: cache && session
  #######################################
  redis:
    image: redis
    container_name: lemp_redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
      - /etc/localtime:/etc/localtime:ro
    restart: always
    networks:
      - backend

  #######################################
  # Memcached: cache && session
  #######################################
  # memcached:
  #   image: memcached:latest
  #   container_name: lemp_memcached
  #   ports:
  #     - "11211:11211"
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #   restart: always
  #   networks:
  #     - backend

  #######################################
  # Mariadb: queue database
  #######################################
  db:
    image: mariadb:latest
    container_name: lemp_mariadb
    restart: always
    volumes:
      - ./mysql/initdb:/docker-entrypoint-initdb.d
      - ./mysql/data:/var/lib/mysql
      - ./logs/mysql:/var/log/mysql
      - /etc/localtime:/etc/localtime:ro
    environment:
      - MYSQL_ROOT_PASSWORD=b8888888
      - MYSQL_DATABASE=queue
      - MYSQL_USER=andaman
      - MYSQL_PASSWORD=b8888888
    ports:
      - "3306:3306"
    networks:
      - backend

  #######################################
  # Mongodb: database
  #######################################
  # mongo:
  #   image: mongo:latest
  #   container_name: lemp_mongo
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: hisiri
  #     MONGO_INITDB_ROOT_PASSWORD: Siri2456
  #     MONGO_INITDB_DATABASE: test
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ./mongodb/data:/data/db
  #     - ./mongodb/initdb:/docker-entrypoint-initdb.d
  #   networks:
  #     - backend

  # php56:
  #   build: ./php56
  #   container_name: lemp_php56-fpm
  #   restart: always
  #   volumes:
  #     - ./www:/var/www/html
  #     - ./php56/php-fpm.conf:/usr/local/etc/php-fpm.conf
  #     - ./php56/php.ini:/usr/local/etc/php/php.ini
  #     - ./logs/php56-fpm:/var/log/php-fpm
  #   expose:
  #     - "9000"
  #     - "22"
  #   networks:
  #     - backend

  # php72:
  #   build: ./php72
  #   container_name: lemp_php72-fpm
  #   restart: always
  #   volumes:
  #     - ./www:/var/www/html
  #     - ./php72/php-fpm.conf:/usr/local/etc/php-fpm.conf
  #     - ./php72/php.ini:/usr/local/etc/php/php.ini
  #     - ./logs/php72-fpm:/var/log/php-fpm
  #   expose:
  #     - "9000"
  #     - "22"
  #   networks:
  #     - backend

  php73:
    build: ./php73
    container_name: lemp_php73-fpm
    restart: always
    volumes:
      - ./www:/var/www/html
      - ./php73/php-fpm.conf:/usr/local/etc/php-fpm.conf
      - ./php73/php.ini:/usr/local/etc/php/php.ini
      - ./logs/php73-fpm:/var/log/php-fpm
    expose:
      - "9000"
      - "22"
    networks:
      - backend

  #######################################
  # Nodejs: queue api
  #######################################
  api:
    build: ./www/api
    container_name: lemp_api
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./logs/api:/usr/src/app/logs
      # - ./api:/usr/src/app
    networks:
      - frontend

  #######################################
  # Web: nuxtjs
  #######################################
  web:
    build: ./www/queue-smart-care
    container_name: lemp_web
    restart: always
    ports:
      - "5000:5000"
    environment:
      NUXT_HOST: 0.0.0.0
      NUXT_PORT: 5000
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - frontend
  #######################################
  # Portainer: docker management
  #######################################
  # portainer:
  #   image: portainer/portainer
  #   container_name: lemp_portainer
  #   restart: always
  #   ports:
  #     - "9000:9000"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./portainer/data:/data
  #   networks:
  #     - frontend
  #     - backend
  #######################################
  # MSSQL: MySQL Server Database
  #######################################
  # mssql:
  #   image: mcr.microsoft.com/mssql/server:2017-latest
  #   container_name: lemp_mssql
  #   restart: always
  #   ports:
  #     - "1433:1433"
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - SA_PASSWORD=Andamanb8888888
  #     - MSSQL_PID=Developer
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ./mssql/data:/var/opt/mssql/data
  #     - ./logs/mssql:/var/opt/mssql/log
  #     - ./mssql/secrets:/var/opt/mssql/secrets
  #   networks:
  #     - backend
  #######################################
  # PHP Myadmin:
  #######################################
  # pma:
  #   image: phpmyadmin/phpmyadmin
  #   container_name: lemp_phpmyadmin
  #   restart: always
  #   ports:
  #     - "8000:80"
  #   environment:
  #     PMA_HOST: db
  #   depends_on:
  #     - db
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #   networks:
  #     - backend
