<?php

namespace common\api\news;

use Yii;
use yii\data\ActiveDataProvider;
use common\models\Tag;
use common\widgets\Fancybox;
use yii\bootstrap4\LinkPager;
use common\models\News as NewsModel;
use cheatsheet\Time;

/**
 * News module API
 * @package yii\easyii\modules\news\api
 *
 * @method static NewsObject get(mixed $id_slug) Get news object by id or slug
 * @method static array items(array $options = []) Get list of news as NewsObject objects
 * @method static mixed last(int $limit = 1) Get last news
 * @method static void plugin() Applies FancyBox widget on photos called by box() function
 * @method static string pages() returns pagination html generated by yii\bootstrap4\LinkPager widget.
 * @method static \stdClass pagination() returns yii\data\Pagination object.
 */

class News extends \common\components\API
{
    private $_adp;
    private $_last;
    private $_items;
    private $_item = [];

    public function api_items($options = [])
    {
        if (!$this->_items) {
            $this->_items = [];

            $with = ['seo'];
            $with[] = 'tags';
            $query = NewsModel::find()->with($with)
            ->status(NewsModel::STATUS_PUBLISHED)
            ->andWhere('published_at <= CURRENT_DATE');

            

            if (!empty($options['author'])) {
                $query->andWhere(['created_by' => $options['author']]);
            }

            if (!empty($options['category']) && $options['category'] != 'all') {
                $query->andWhere(['category_id' => $options['category']]);
            }

            if (!empty($options['where'])) {
                $query->andFilterWhere($options['where']);
            }
            if (!empty($options['tags'])) {
                $query
                    ->innerJoinWith('tags', false)
                    ->andWhere([Tag::tableName() . '.name' => (new NewsModel)->filterTagValues($options['tags'])])
                    ->addGroupBy('news_id');
            }
            
            if (!empty($options['orderBy'])) {
                $query->orderBy($options['orderBy']);
            } else {
                $query->sortDate();
            }
            if (!empty($options['search'])) {
                $search = $options['search'];
                $query->andFilterWhere(['like', 'title', $search]);
                    // ->orFilterWhere(['like', 'short', $search])
                    // ->orFilterWhere(['like', 'text', $search])
                    // ->orFilterWhere(['like', 'slug', $search])
                    // ->orFilterWhere(['like', 'view', $search]);
            }

            $this->_adp = new ActiveDataProvider([
                'query' => $query,
                'pagination' => !empty($options['pagination']) ? $options['pagination'] : []
            ]);

            foreach ($this->_adp->models as $model) {
                $this->_items[] = new NewsObject($model);
            }
        }
        return $this->_items;
    }

    public function api_get($id_slug)
    {
        if (!isset($this->_item[$id_slug])) {
            $this->_item[$id_slug] = $this->findNews($id_slug);
        }
        return $this->_item[$id_slug];
    }

    public function api_last($limit = 1)
    {
        if ($limit === 1 && $this->_last) {
            return $this->_last;
        }

        $with = ['seo'];
        $with[] = 'tags';
        $result = [];
        foreach (NewsModel::find()->with($with)->status(NewsModel::STATUS_PUBLISHED)->sortDate()->limit($limit)->all() as $item) {
            $result[] = new NewsObject($item);
        }

        if ($limit > 1) {
            return $result;
        } else {
            $this->_last = count($result) ? $result[0] : null;
            return $this->_last;
        }
    }

    public function api_plugin($options = [])
    {
        /*  Fancybox::widget([
            'selector' => '.easyii-box',
            'options' => $options
        ]); */
    }

    public function api_pagination()
    {
        return $this->_adp ? $this->_adp->pagination : null;
    }

    public function api_pages()
    {
        return $this->_adp ? LinkPager::widget(['pagination' => $this->_adp->pagination]) : '';
    }

    private function findNews($id_slug)
    {
        $news = NewsModel::find()->where(['or', 'news_id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])->status(NewsModel::STATUS_PUBLISHED)->one();
        if ($news) {
            $news->updateCounters(['views' => 1]);
            return new NewsObject($news);
        } else {
            return null;
        }
    }
}
